/*
	This file is part of "GA4 Dataform Package".
	Copyright (C) 2023-2025 Superform Labs <support@ga4dataform.com>
	Artem Korneev, Jules Stuifbergen,
	Johan van de Werken, Kriszti√°n Korpa,
	Simon Breton

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, version 3 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License in the LICENSE.txt file for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

config {
  type: "incremental",
  tags: [dataform.projectConfig.vars.GA4_DATASET,"transactions","intermediate"],
  schema: dataform.projectConfig.vars.TRANSFORMATIONS_DATASET,
  description: "transactions table with nested items - so could be used as line_items table, too",
  bigquery: {
    partitionBy: "transaction_date"
  },
    columns: require("includes/core/documentation/helpers.js").ga4Transactions
}

js {
    const { helpers } = require("includes/core/helpers");
    const config = helpers.getConfig();
}

/* incrementality */
pre_operations {
  declare date_checkpoint DATE;
  ---
  set date_checkpoint = (
    ${when(incremental(),
      `select
        coalesce(max(transaction_date)+1, date('${config.GA4_START_DATE}'))
      from ${self()}
      where is_final = true`,
    `select date('${config.GA4_START_DATE}')`)}   /* the default, when it's not incremental */
  );
  ---
  ${
    /* delete non-final data, since this may be updated later by GA4 */
    when(incremental(),
      `delete from ${self()} where transaction_date >= date_checkpoint`
    )
  }
}

with src as (
    select * from ${ref("ga4_events")}
    where event_date >= date_checkpoint
    and event_name in ('purchase', 'refund') -- events is clustered by event_name, so it's pretty cheap
),

step1 as (
    -- we get the basic columns + ecommerce data, nested items + the item totals
    select
        event_name,
        event_date as transaction_date,
        is_final,
        ecommerce.transaction_id as transaction_id,
        event_id,
        session_id,
        user_pseudo_id,
        user_id,
        ${config.TRANSACTION_TOTALS_UID} as uid,
        stream_id,
        platform,
        time,
        event_params.currency,
        event_params.coupon,
        struct(
            ecommerce.total_item_quantity,
            ecommerce.purchase_revenue_in_usd,
            ecommerce.purchase_revenue,
            ecommerce.shipping_value_in_usd,
            ecommerce.shipping_value,
            ecommerce.tax_value_in_usd,
            ecommerce.tax_value,
            ecommerce.unique_items,
            ecommerce.refund_value_in_usd,
            ecommerce.refund_value
        ) as ecommerce,
        items,
        struct(
            (select sum(i.quantity) from unnest(items) i) as quantity,
            (select sum(item_revenue) from unnest(items) i) as item_revenue,
            (select sum(item_revenue_in_usd) from unnest(items) i) as item_revenue_in_usd,
            (select sum(item_refund) from unnest(items) i) as item_refund,
            (select sum(item_refund_in_usd) from unnest(items) i) as item_refund_in_usd,
            (select countif(i.coupon is not null and i.coupon != '(not set)') from unnest(items) i) as coupons,
            (select coalesce(count(distinct if(i.coupon = '(not set)', null, i.coupon)),0) from unnest(items) i) as unique_coupons
        ) as item_totals,

    from src
)


select
    *
from step1



